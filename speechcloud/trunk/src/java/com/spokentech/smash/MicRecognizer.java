package com.spokentech.smash;

import java.applet.Applet;
import java.util.List;

import netscape.javascript.JSObject;

import org.apache.log4j.Logger;
import org.json.JSONException;
import org.json.JSONStringer;
import com.spokentech.speechdown.common.RecognitionResult;
import com.spokentech.speechdown.common.rule.RuleMatch;

public class MicRecognizer extends Applet{
	

    private static final long serialVersionUID = 1L;

	private static Logger _logger = Logger.getLogger(MicRecognizer.class);
    
    public JSObject _window = null;
    
    
    
	public MicRecognizer() {
	    super();
        _window = (JSObject) JSObject.getWindow(this);
        
    }
	
	private void ProcessRecognitionResult(RecognitionResult result) {

	        if (result != null) {
	      
	        if( (!result.getRuleMatches().isEmpty()) && (!result.isOutOfGrammar())) {
	            _logger.info("PRocessing Rec result: "+result.toString());
	            //_logger.info("text:"+result.getText()+" matches:"+result.getRuleMatches()+" oog flag:"+result.isOutOfGrammar());
	            boolean recogModeCommand = false;
	            
	            //check if the rule is a recognition mode change rule.  if so no need to pass it on 
	            //to the javascript/browser.  But will change the state so the next recog command will
	            //sue the proper grammar and command type (hotword or normal)
	            List<RuleMatch> rules = result.getRuleMatches();
	            for(RuleMatch rule : rules) {
	                _logger.info(rule.getTag()+"/"+rule.getRule());
	                if  (rule.getRule().equals("recognitionMode")) {
	                    recogModeCommand = true;
	                
	                    //if  (rule.getTag().equals("hotword")) {
	                    //    changeStatus(sessionState,RecognitionStateType.hotword); 
	                    //} else if (rule.getTag().equals("normal")) {
	                    //    changeStatus(sessionState,RecognitionStateType.normal);
	                    //}
	                    _logger.info("Recog mode change command to "+rule.getTag()+" so no call to javascript...");
	                }

	            }
	            // if there was not recognition change command, go ahead and pass info on to the web page/javascript
	            if (!recogModeCommand) {
	               String[] params = new String[2];
	               params[0] = result.getText();
	               params[1] = toJSONString(result);
	            
	                _window.call("recognitionEvent", params); 
	            } else {
	                
	            }
	        } else {
	            _logger.info("NO results to process and pass to javascript...");
	        }
	        }else {
	            _logger.info("NULL Result returned from speech server.");
	        }
	    }
	   /**
	     * TODOC
	     * @param String representation of this object (generated by the toString() method)
	     * @return JSON String representation of the recognition result
	     */
	    public  String toJSONString(RecognitionResult result) {
	        
	        System.out.println("Converting to JSON. "+ result.toString());
	        
	        JSONStringer jj = new JSONStringer();
	        String s = null;
	        
	        if (result == null)
	            return null;
	        
	        try {
	            jj.object();
	            //jj.key("input");
	            //jj.value(result.getText());
	            //jj.key("slots");
	            //jj.array();
	            for (int i = 0; i < result.getRuleMatches().size(); i++) {
	                System.out.println("rule matche # "+i+ " is "+result.getRuleMatches().get(i).getRule() +" :: "+result.getRuleMatches().get(i).getTag() );
	                //jj.object();
	                jj.key(result.getRuleMatches().get(i).getRule());
	                jj.value(result.getRuleMatches().get(i).getTag());
	                
	                //hack in the url
	                if (result.getRuleMatches().get(i).getRule().equals("link")) {
	                    jj.key("url");
	                //TODO: ADD BACK EQUIVALENT    jj.value(urls.get(result.getRuleMatches().get(i).getTag()));
	                }
	                //jj.endObject();
	            }
	            //jj.endArray();
	            jj.endObject();
	       
	        } catch (JSONException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } 

	        return jj.toString();
	    }
}
