package de.dfki.lt.mary.unitselection.voiceimport;

import javax.swing.JFileChooser;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.OutputStreamWriter;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import de.dfki.lt.signalproc.util.AudioPlayer;
import de.dfki.lt.signalproc.util.AudioConverterUtils;

/**
 * A GUI Interface to support Audio Conversion  
 * @author  Sathish Chandra Pammi
 */
public class AudioConverterGUI extends javax.swing.JFrame {
    
    /** Creates new form SampleRateConversion */
    public AudioConverterGUI() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        inDir = new javax.swing.JTextField();
        stereotoMono = new javax.swing.JCheckBox();
        bit24Tobit16 = new javax.swing.JCheckBox();
        sampleConvert = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        outDir = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        leftChannel = new javax.swing.JRadioButton();
        rightChannel = new javax.swing.JRadioButton();
        bothChannels = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar(0,100);
        progressBar.setVisible(false);
        
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Wave Audio Converter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12));
        jLabel1.setText("Input Wave Directory :");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runAudioConversion(evt);
            }
        });

        stereotoMono.setSelected(true);
        stereotoMono.setText("  Stereo to Mono Conversion");
        stereotoMono.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        stereotoMono.setMargin(new java.awt.Insets(0, 0, 0, 0));

        bit24Tobit16.setSelected(true);
        bit24Tobit16.setText("  24-Bit to 16-Bit Conversion");
        bit24Tobit16.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bit24Tobit16.setMargin(new java.awt.Insets(0, 0, 0, 0));

        sampleConvert.setSelected(true);
        sampleConvert.setText("  Sampling Rate Conversion ( Down-Sampling )");
        sampleConvert.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sampleConvert.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputFilePath(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHelp(evt);
            }
        });
        helpButton.setVisible(false);

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitGUI(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12));
        jLabel2.setText("Output Wave Directory :");

        jButton5.setText("Browse");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutFilePath(evt);
            }
        });

        jLabel3.setText("Input Source Channel: ");

        buttonGroup1.add(leftChannel);
        leftChannel.setSelected(true);
        leftChannel.setText("Left");
        leftChannel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        leftChannel.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(rightChannel);
        rightChannel.setText("Right");
        rightChannel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rightChannel.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(bothChannels);
        bothChannels.setText("Both");
        bothChannels.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        bothChannels.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel4.setText("Target Sampling Rate (in Hz) :");

        jTextField3.setText("16000");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(89, 89, 89)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 119, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, sampleConvert, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, bit24Tobit16, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 132, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .add(jLabel2))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(outDir)
                                            .add(inDir, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(17, 17, 17)
                                        .add(jLabel3)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(leftChannel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(rightChannel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(bothChannels))
                                    .add(stereotoMono, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))))
                        .addContainerGap(42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                .add(runButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(73, 73, 73)
                                .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(88, 88, 88)
                                .add(quitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(61, 61, 61))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(inDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel2)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(outDir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButton5)))
                .add(14, 14, 14)
                .add(stereotoMono, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(leftChannel)
                    .add(rightChannel)
                    .add(bothChannels))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(bit24Tobit16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(sampleConvert, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(35, 35, 35)
                .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 35, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(runButton)
                    .add(helpButton)
                    .add(quitButton))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>                        

   private void showHelp(java.awt.event.ActionEvent evt) {                          
// TODO add your handling code here:
    }      
    
     
   private void runAudioConversion(java.awt.event.ActionEvent evt) {                                    
// TODO add your handling code here:
        
       try{
           
       if(inDir.getText().equals("") || outDir.getText().equals("")){
           throw new Exception("Input or Output Directory was not chosen");
       }
       if(sampleConvert.isSelected() && jTextField3.getText().equals("")){
           throw new Exception("Target Sampling Rate was not mentioned for Sampling Conversion");
       }
       if(!stereotoMono.isSelected() && !bit24Tobit16.isSelected() && !sampleConvert.isSelected()){
           System.out.println("Nothing to do.... Exit.");
           System.exit(0);
       }
       
        int bestShift; 
        int targetSamplingRate = Integer.parseInt(jTextField3.getText());
        File inDirPath  = new File(inDir.getText());
        File outDirPath = new File(outDir.getText());
        String [] wavFiles = inDirPath.list();
        //int progress;
        new Thread(){
            public void run() {
                while(progress < 100.0 ) {
                    System.out.println("Completed So Far: "+ progress +" %");
                    try { Thread.sleep(500); }
                    catch (InterruptedException ie) {}
                }
            }
        }.start();
        System.out.println("Number of Wave files need to Convert : "+ wavFiles.length);
        int interProgress = 0;
        if(bit24Tobit16.isSelected()){
            bestShift = bestShiftBits(wavFiles, 16);
            System.out.println("Best Shift: "+bestShift);
            interProgress = 50;
        }
        else bestShift = 8;
        

        
        for(int i=0;i<wavFiles.length;i++){
            progress = interProgress + (i * (100 -  interProgress)/ wavFiles.length);
            
            //progressBar.setValue(progress);
            if(wavFiles[i].endsWith(".wav")){
                //System.out.println(wavFiles[i]);
                String inPath = inDirPath.getAbsolutePath()+System.getProperty("file.separator")+wavFiles[i];
                String outPath = outDirPath.getAbsolutePath()+System.getProperty("file.separator")+wavFiles[i];
                AudioInputStream ais = AudioSystem.getAudioInputStream(new File(inPath));
                
                if (!ais.getFormat().getEncoding().equals(AudioFormat.Encoding.PCM_SIGNED)) {
                    ais = AudioSystem.getAudioInputStream(AudioFormat.Encoding.PCM_SIGNED, ais);
                }
                if(stereotoMono.isSelected()){
                    int channel = AudioPlayer.STEREO;
                    if(leftChannel.isSelected()) channel = AudioPlayer.LEFT_ONLY;
                    if(rightChannel.isSelected()) channel = AudioPlayer.RIGHT_ONLY;
                    if(bothChannels.isSelected()) channel = AudioPlayer.STEREO;
                    ais = AudioConverterUtils.convertStereoToMono(ais,channel);
                }
                
                // If Audio is Mono then only remove Low Frequency Noise 
                if((ais.getFormat().getChannels() == 1))
                        ais = AudioConverterUtils.removeLowFrequencyNoise(ais);
                
                if(bit24Tobit16.isSelected())
                    ais = AudioConverterUtils.convertBit24ToBit16(ais,bestShift);
                    //ais = AudioConverterUtils.convertBit24ToBit16(ais);
                
                File outFile =  new File(outPath);
                if(outFile.exists()){
                    outFile.delete();
                }
                AudioSystem.write(ais, AudioFileFormat.Type.WAVE, outFile);
                
                if(sampleConvert.isSelected()){
                        
                    //ais = AudioConverterUtils.downSampling(ais, targetSamplingRate);
                    samplingRateConverter(outPath, (int)targetSamplingRate);
                }
                
                /* File outFile =  new File(outPath);
                if(outFile.exists()){
                    outFile.delete();
                }
                AudioSystem.write(ais, AudioFileFormat.Type.WAVE, outFile);*/
                
                ais.reset();
                ais.close();
                
            }
        }
        
        System.out.println("Completed So Far: 100%");
        System.out.println("Completed Audio Conversion successfully... Done.");
        }
        catch(Exception e){
            e.printStackTrace();
        }
         
        System.exit(0);
    }
   
  /**
   * To choose a global value to get Best Dynamic Bits
   * @param wavFileNames
   * @param targetBitsPerSample
   * @return
   * @throws Exception
   */ 
  private int bestShiftBits(String[] wavFiles, int targetBitsPerSample) throws Exception{ 

   int globalBestShift=0;
   
   File inDirPath  = new File(inDir.getText());
   for(int i=0;i<wavFiles.length;i++){
       progress = (i * 50 / wavFiles.length);
       
       //progressBar.setValue(progress);
       if(wavFiles[i].endsWith(".wav")){
           //System.out.println(wavFiles[i]);
           String inPath = inDirPath.getAbsolutePath()+System.getProperty("file.separator")+wavFiles[i];
//           String outPath = outDirPath.getAbsolutePath()+System.getProperty("file.separator")+wavFiles[i];
           AudioInputStream ais = AudioSystem.getAudioInputStream(new File(inPath));
           
           if (!ais.getFormat().getEncoding().equals(AudioFormat.Encoding.PCM_SIGNED)) {
               ais = AudioSystem.getAudioInputStream(AudioFormat.Encoding.PCM_SIGNED, ais);
           }
           if(stereotoMono.isSelected()){
               int channel = AudioPlayer.STEREO;
               if(leftChannel.isSelected()) channel = AudioPlayer.LEFT_ONLY;
               if(rightChannel.isSelected()) channel = AudioPlayer.RIGHT_ONLY;
               if(bothChannels.isSelected()) channel = AudioPlayer.STEREO;
               ais = AudioConverterUtils.convertStereoToMono(ais,channel);
           }
           
           // If Audio is Mono then only remove Low Frequency Noise 
           if((ais.getFormat().getChannels() == 1))
                   ais = AudioConverterUtils.removeLowFrequencyNoise(ais);
           
           int[] samples = AudioConverterUtils.getSamples(ais);
           int maxBitPos = 0;
           int valueAfterShift;
           int bitsPerSample = ais.getFormat().getSampleSizeInBits();
           for(int k=0;k<samples.length;k++){
           for(int j=bitsPerSample;j>=1;j--){
               valueAfterShift = Math.abs(samples[k]) >> j;
               if(valueAfterShift != 0){  
                   if(maxBitPos < j) maxBitPos = j;
                   break;
                }
              }
           }
           
           ais.reset();
           ais.close();
           int bestShift = maxBitPos - targetBitsPerSample + 2;
           if(bestShift > globalBestShift){
               globalBestShift = bestShift;
           }
                   
       }
   }
   
   return globalBestShift;
}  
   
/** 
          * Sampling Rate Conversion doing with SOX. 
          * @param outpath 
          * @param targetSamplingRate 
          * @throws IOException 
*/ 
           private void samplingRateConverter(String waveFile, int targetSamplingRate) throws IOException{ 
               
              try{ 
                 Runtime rtime = Runtime.getRuntime(); 
                 Process process = rtime.exec("/bin/bash"); 
                   
                   PrintWriter pw = new PrintWriter( 
                         new OutputStreamWriter(process.getOutputStream())); 
                 pw.print("( sox "+waveFile+" -r " 
                         + targetSamplingRate 
                          +" tempOut.wav" 
                          +" ; mv tempOut.wav "+waveFile 
                          +" ; exit )\n"); 
                  pw.flush(); 
                  pw.close(); 
                  process.waitFor(); 
                  process.exitValue(); 
              } 
              catch(Exception e) 
              { 
                 e.printStackTrace(); 
              } 
             return; 
          } 
   
    private void quitGUI(java.awt.event.ActionEvent evt) {                         
// TODO add your handling code here:
        System.exit(0);
    }                        

    private void browseOutFilePath(java.awt.event.ActionEvent evt) {                                   
// TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnVal = fc.showOpenDialog(AudioConverterGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
              File file = fc.getSelectedFile(); 
              //System.out.println("Opening: " + file.getAbsolutePath());
              outDir.setText(file.getAbsolutePath());
        } 
        //else {
        //      System.out.println("Open command cancelled by user.");
        //}
    }                                  

    private void browseInputFilePath(java.awt.event.ActionEvent evt) {                                     
// TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnVal = fc.showOpenDialog(AudioConverterGUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
              File file = fc.getSelectedFile(); 
              //System.out.println("Opening: " + file.getAbsolutePath());
              inDir.setText(file.getAbsolutePath());
        } 
        //else {
        //      System.out.println("Open command cancelled by user.");
        //}
  
    }                                    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AudioConverterGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox bit24Tobit16;
    private javax.swing.JRadioButton bothChannels;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton helpButton;
    private javax.swing.JTextField inDir;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JRadioButton leftChannel;
    private javax.swing.JTextField outDir;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton quitButton;
    private javax.swing.JRadioButton rightChannel;
    private javax.swing.JButton runButton;
    private javax.swing.JCheckBox sampleConvert;
    private javax.swing.JCheckBox stereotoMono;
    private int progress;
    // End of variables declaration                   
    
}


